/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as _protectedRouteImport } from './routes/__protected'
import { Route as RecordsNewRouteImport } from './routes/records/new'
import { Route as PublicRegisterRouteImport } from './routes/public/register'
import { Route as Public_publicRouteImport } from './routes/public/__public'

const PublicRouteImport = createFileRoute('/public')()

const PublicRoute = PublicRouteImport.update({
  id: '/public',
  path: '/public',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const _protectedRoute = _protectedRouteImport.update({
  id: '/__protected',
  getParentRoute: () => rootRouteImport,
} as any)
const RecordsNewRoute = RecordsNewRouteImport.update({
  id: '/records/new',
  path: '/records/new',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicRegisterRoute = PublicRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => PublicRoute,
} as any)
const Public_publicRoute = Public_publicRouteImport.update({
  id: '/__public',
  getParentRoute: () => PublicRoute,
} as any)

export interface FileRoutesByFullPath {
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/public': typeof Public_publicRoute
  '/public/register': typeof PublicRegisterRoute
  '/records/new': typeof RecordsNewRoute
}
export interface FileRoutesByTo {
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/public': typeof Public_publicRoute
  '/public/register': typeof PublicRegisterRoute
  '/records/new': typeof RecordsNewRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/__protected': typeof _protectedRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/public': typeof PublicRouteWithChildren
  '/public/__public': typeof Public_publicRoute
  '/public/register': typeof PublicRegisterRoute
  '/records/new': typeof RecordsNewRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/dashboard'
    | '/login'
    | '/public'
    | '/public/register'
    | '/records/new'
  fileRoutesByTo: FileRoutesByTo
  to: '/dashboard' | '/login' | '/public' | '/public/register' | '/records/new'
  id:
    | '__root__'
    | '/__protected'
    | '/dashboard'
    | '/login'
    | '/public'
    | '/public/__public'
    | '/public/register'
    | '/records/new'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  _protectedRoute: typeof _protectedRoute
  DashboardRoute: typeof DashboardRoute
  LoginRoute: typeof LoginRoute
  PublicRoute: typeof PublicRouteWithChildren
  RecordsNewRoute: typeof RecordsNewRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/public': {
      id: '/public'
      path: '/public'
      fullPath: '/public'
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/__protected': {
      id: '/__protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof _protectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/records/new': {
      id: '/records/new'
      path: '/records/new'
      fullPath: '/records/new'
      preLoaderRoute: typeof RecordsNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/public/register': {
      id: '/public/register'
      path: '/register'
      fullPath: '/public/register'
      preLoaderRoute: typeof PublicRegisterRouteImport
      parentRoute: typeof PublicRoute
    }
    '/public/__public': {
      id: '/public/__public'
      path: '/public'
      fullPath: '/public'
      preLoaderRoute: typeof Public_publicRouteImport
      parentRoute: typeof PublicRoute
    }
  }
}

interface PublicRouteChildren {
  Public_publicRoute: typeof Public_publicRoute
  PublicRegisterRoute: typeof PublicRegisterRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  Public_publicRoute: Public_publicRoute,
  PublicRegisterRoute: PublicRegisterRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  _protectedRoute: _protectedRoute,
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
  PublicRoute: PublicRouteWithChildren,
  RecordsNewRoute: RecordsNewRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
